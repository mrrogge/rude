local DataContext = require('rude.DataContext')
local RudeObject = require('rude.RudeObject')
local Exception = require('rude.Exception')
local MissingComClassException = require('rude.MissingComClassException')

describe('DataContext instance', function()
    local dataContext
    local TestComClass, testFunction
    before_each(function()
        dataContext = DataContext()
        TestComClass = RudeObject:subclass('TestComClass')
        testFunction = function() end
    end)

    describe('initialize()', function()
        it('returns the instance', function()
            local dataContext = DataContext()
            assert.is.equal(dataContext:initialize(), dataContext)
        end)
    end)

    describe('registerComClass()', function()
        it('registers a component class to an id', function()
            local id = 'test'
            dataContext:registerComClass(id, TestComClass)
            assert.is.equal(dataContext:getComClass(id), TestComClass)
        end)
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerComClass('test', TestComClass), dataContext)
        end)
        it('allows replacing existing class with new class', function()
            local NewTestComClass = RudeObject:subclass('NewTestComClass')
            dataContext:registerComClass('test', TestComClass)
            dataContext:registerComClass('test', NewTestComClass)
            assert.is.equal(dataContext:getComClass('test'), NewTestComClass)
        end)
    end)

    describe('getComClass()', function()
        it('returns nil and exception for non-existing class', function()
            local class, err = dataContext:getComClass('unregistered')
            assert.is.equal(nil, class)
            assert.is.truthy(err:isInstanceOf(MissingComClassException))
        end)
        it('returns a previously registered class', function()
            local id = 'test'
            dataContext:registerComClass(id, TestComClass)
            assert.is.equal(dataContext:getComClass(id), TestComClass)
        end)
    end)

    describe('registerClass()', function()
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerClass(TestComClass), dataContext)
        end)
    end)

    describe('registerFunction()', function()
        it('registers a function to an id', function()
            local id = 'test'
            dataContext:registerFunction(id, testFunction)
            assert.is.equal(dataContext:getFunction(id), testFunction)
        end)
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerFunction('test', testFunction), dataContext)
        end)
        it('allows replacing existing function with new function', function()
            local newFunction = function() end
            dataContext:registerFunction('test', testFunction)
            dataContext:registerFunction('test', newFunction)
            assert.is.equal(dataContext:getFunction('test'), newFunction)
        end)
    end)

    describe('getFunction()', function()
        it('returns nil and exception for non-existing function', function()
            local f, err = dataContext:getFunction('unregistered')
            assert.is.equal(nil, f)
            assert.is.truthy(err:isInstanceOf(Exception))
        end)
        it('returns a previously registered function', function()
            local id = 'test'
            dataContext:registerFunction(id, testFunction)
            assert.is.equal(dataContext:getFunction(id), testFunction)
        end)
    end)

    describe('registerAssetLoader()', function()
        it('registers an asset loader function to an id', function()
            local id = 'test'
            dataContext:registerAssetLoader(id, testFunction)
            assert.is.equal(dataContext:getAssetLoader(id), testFunction)
        end)
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerAssetLoader('test', testFunction), dataContext)
        end)
        it('allows replacing existing asset loader with new function', function()
            local newFunction = function() end
            dataContext:registerAssetLoader('test', testFunction)
            dataContext:registerAssetLoader('test', newFunction)
            assert.is.equal(dataContext:getAssetLoader('test'), newFunction)
        end)
    end)

    describe('getAssetLoader()', function()
        it('returns nil and exception for non-existing asset loader', function()
            local f, err = dataContext:getAssetLoader('unregistered')
            assert.is.equal(nil, f)
            assert.is.truthy(err:isInstanceOf(Exception))
        end)
        it('returns a previously registered asset loader', function()
            local id = 'test'
            dataContext:registerAssetLoader(id, testFunction)
            assert.is.equal(dataContext:getAssetLoader(id), testFunction)
        end)
    end)

    describe('getAsset()', function()
        it('returns nil and exception for non-existing asset loader', function()
            local f, err = dataContext:getAsset('unregistered', 'unregistered')
            assert.is.equal(nil, f)
            assert.is.truthy(err:isInstanceOf(Exception))
        end)
        it('passes the asset ID to the asset loader function', function()
            local testFunction = spy.new(function() end)
            dataContext:registerAssetLoader('testLoader', testFunction)
            dataContext:getAsset('testLoader', 'testAsset')
            assert.spy(testFunction).was.called_with('testAsset')
        end)
        it('returns the result of calling the asset loader', function()
            local assetLoader = function() return 'testResult' end
            dataContext:registerAssetLoader('testLoader', assetLoader)
            assert.is.equal(dataContext:getAsset('testLoader', 'testAsset'), 'testResult')
        end)
    end)

    describe('releaseAssets()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                dataContext:releaseAssets('test')
            end)
        end)
    end)

    describe('registerDataDecoder()', function()
        it('registers a data decoder to an id', function()
            local id = 'test'
            dataContext:registerDataDecoder(id, testFunction)
            assert.is.equal(dataContext:getDataDecoder(id), testFunction)
        end)
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerDataDecoder('test', testFunction), dataContext)
        end)
        it('allows replacing existing data decoder with new function', function()
            local newFunction = function() end
            dataContext:registerDataDecoder('test', testFunction)
            dataContext:registerDataDecoder('test', newFunction)
            assert.is.equal(dataContext:getDataDecoder('test'), newFunction)
        end)
    end)

    describe('getDataDecoder()', function()
        it('returns nil and exception for non-existing data decoder', function()
            local f, err = dataContext:getDataDecoder('unregistered')
            assert.is.equal(nil, f)
            assert.is.truthy(err:isInstanceOf(Exception))
        end)
        it('returns a previously registered data decoder', function()
            local id = 'test'
            dataContext:registerDataDecoder(id, testFunction)
            assert.is.equal(dataContext:getDataDecoder(id), testFunction)
        end)
    end)

    describe('registerDataEncoder()', function()
        it('registers a data encoder to an id', function()
            local id = 'test'
            dataContext:registerDataEncoder(id, testFunction)
            assert.is.equal(dataContext:getDataEncoder(id), testFunction)
        end)
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerDataEncoder('test', testFunction), dataContext)
        end)
        it('allows replacing existing data encoder with new function', function()
            local newFunction = function() end
            dataContext:registerDataEncoder('test', testFunction)
            dataContext:registerDataEncoder('test', newFunction)
            assert.is.equal(dataContext:getDataEncoder('test'), newFunction)
        end)
    end)

    describe('getDataEncoder()', function()
        it('returns nil and exception for non-existing data encoder', function()
            local f, err = dataContext:getDataEncoder('unregistered')
            assert.is.equal(nil, f)
            assert.is.truthy(err:isInstanceOf(Exception))
        end)
        it('returns a previously registered data encoder', function()
            local id = 'test'
            dataContext:registerDataEncoder(id, testFunction)
            assert.is.equal(dataContext:getDataEncoder(id), testFunction)
        end)
    end)
end)