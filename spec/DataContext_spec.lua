local DataContext = require('rude.DataContext')
local RudeObject = require('rude.RudeObject')

describe('DataContext instance', function()
    local dataContext
    local TestComClass, testFunction
    before_each(function()
        dataContext = DataContext()
        TestComClass = RudeObject:subclass('TestComClass')
        testFunction = function() end
    end)

    describe('initialize()', function()
        it('returns the instance', function()
            local dataContext = DataContext()
            assert.is.equal(dataContext:initialize(), dataContext)
        end)
    end)

    describe('registerComClass()', function()
        it('registers a component class to an id', function()
            local id = 'test'
            dataContext:registerComClass(id, TestComClass)
            assert.is.equal(dataContext:getComClass(id), TestComClass)
        end)
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerComClass('test', TestComClass), dataContext)
        end)
        it('allows replacing existing class with new class', function()
            local NewTestComClass = RudeObject:subclass('NewTestComClass')
            dataContext:registerComClass('test', TestComClass)
            dataContext:registerComClass('test', NewTestComClass)
            assert.is.equal(dataContext:getComClass('test'), NewTestComClass)
        end)
    end)

    describe('getComClass()', function()
        it('returns nil and error message for non-existing class', function()
            local class, err = dataContext:getComClass('unregistered')
            assert.is.equal(nil, class)
            assert.is.truthy(type(err) == 'string')
        end)
        it('returns a previously registered class', function()
            local id = 'test'
            dataContext:registerComClass(id, TestComClass)
            assert.is.equal(dataContext:getComClass(id), TestComClass)
        end)
    end)

    describe('registerClass()', function()
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerClass(TestComClass), dataContext)
        end)
    end)

    describe('registerFunction()', function()
        it('registers a function to an id', function()
            local id = 'test'
            dataContext:registerFunction(id, testFunction)
            assert.is.equal(dataContext:getFunction(id), testFunction)
        end)
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerFunction('test', testFunction), dataContext)
        end)
        it('allows replacing existing function with new function', function()
            local newFunction = function() end
            dataContext:registerFunction('test', testFunction)
            dataContext:registerFunction('test', newFunction)
            assert.is.equal(dataContext:getFunction('test'), newFunction)
        end)
    end)

    describe('getFunction()', function()
        it('returns nil and error message for non-existing function', function()
            local f, err = dataContext:getFunction('unregistered')
            assert.is.equal(nil, f)
            assert.is.truthy(type(err) == 'string')
        end)
        it('returns a previously registered function', function()
            local id = 'test'
            dataContext:registerFunction(id, testFunction)
            assert.is.equal(dataContext:getFunction(id), testFunction)
        end)
    end)

    describe('registerAssetLoader()', function()
        it('returns the DataContext instance', function()
            assert.is.equal(dataContext:registerFunction('test', testFunction), dataContext)
        end)
        it('allows replacing existing function with new function', function()
            local newFunction = function() end
            dataContext:registerFunction('test', testFunction)
            dataContext:registerFunction('test', newFunction)
            assert.is.equal(dataContext:getFunction('test'), newFunction)
        end)
    end)
end)