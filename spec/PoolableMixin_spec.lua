local PoolableMixin = require('rude.PoolableMixin')
local RudeObject = require('rude.RudeObject')

describe('PoolableMixin', function()
    describe('when included by a base class', function()
        local TestClass
        before_each(function()
            TestClass = RudeObject:subclass('TestClass')
            TestClass:include(PoolableMixin)
        end)
        it('adds a TablePool instance to the class', function()
            assert.is.Type(TestClass.pool, 'table')
        end)
        it('adds a release() function for the class', function()
            assert.is.Type(TestClass.release, 'function')
        end)
        it('adds a release() function for instances of the class', function()
            local o1 = TestClass()
            assert.is.Type(o1.release, 'function')
        end)
        it('allows the class instances to be pooled', function()
            local o1 = TestClass()
            o1:release()
            local o2 = TestClass()
            assert.is.equal(o1, o2)
        end)

        it('subclasses of a poolable class are also pooled', function()
            local TestSubClass = TestClass:subclass('TestSubClass')
            local o1 = TestSubClass()
            o1:release()
            local o2 = TestSubClass()
            assert.is.equal(o1, o2)
        end)

        it("subclasses of a poolable class share the parent class's pool", function()
            local TestSubClass = TestClass:subclass('TestSubClass')
            assert.is.equal(TestClass.pool, TestSubClass.pool)
        end)

        describe('when included by a subclass of an already poolable class', function()
            it("the subclass's pool is separate from the parent class's", function()
                local TestSubClass = TestClass:subclass('TestSubClass')
                TestSubClass:include(PoolableMixin)
                assert.is_not.equal(TestClass.pool, TestSubClass.pool)
            end)
        end)
    end)
end)