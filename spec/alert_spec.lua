local alert = require('rude.alert')

describe('alert module:', function()
    local snapshot
    before_each(function()
        snapshot = assert.snapshot()
        alert.registerClass('default', 'ignore')
        alert.registerClass('fatal', 'ignore')
        alert.registerClass('warning', 'ignore')
        alert.registerClass('info', 'ignore')
    end)
    after_each(function()
        snapshot:revert()
    end)
    describe('registerHandler()', function()
        it('registers a handler function to a handler ID', function()
            local s = spy.new(function() end)
            local handler = function() s() end
            alert.registerHandler('test', handler)
            alert.registerClass('default', 'test')
            alert.raise('test', 'default')
            assert.spy(s).was.called()
        end)
    end)
    describe('registerClass()', function()
        it('registers a new alert class', function()
            alert.registerClass('test', 'ignore')
            assert.has_no.errors(function()
                alert.raise('test', 'test')
            end)
        end)
        it('sets the handler to call for a given class ID', function()
            local s = spy.new(function() end)
            alert.registerHandler('test', function() s() end)
            alert.registerClass('test', 'test')
            alert.raise('test', 'test')
            assert.spy(s).was.called()
        end)
    end)
    describe('raise()', function()
        describe('when passed no class identifier', function()
            it('calls the handler for the default class', function()
                local s = spy.new(function() end)
                alert.registerHandler('test', function() s() end)
                alert.registerClass('default', 'test')
                alert.raise('test')
                assert.spy(s).was.called()
            end)
        end)
        describe('when passed a registered class identifier', function()
            it('calls the handler registered for that class', function()
                local s = spy.new(function() end)
                alert.registerHandler('test', function() s() end)
                alert.registerClass('test', 'test')
                alert.raise('test', 'test')
                assert.spy(s).was.called()
            end)
        end)
        it('errors when passed an unknown class ID', function()
            assert.has.errors(function()
                alert.raise('should error', 'unknown')
            end)
        end)
        it('errors when passed a class that is registered with an unknown handler ID', function()
            alert.registerClass('badClass', 'unknown')
            assert.has.errors(function()
                alert.raise('should error', 'badClass')
            end)
        end)
    end)
    it('calls raise() when called', function()
        spy.on(alert, 'raise')
        alert('test')
        assert.spy(alert.raise).was.called()
        alert.raise:revert()
    end)
end)