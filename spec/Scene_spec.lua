local Engine = require('rude.Engine')
local Scene = require('rude.Scene')
local RudeObject = require('rude.RudeObject')

describe('a Scene instance', function()
    local engine, scene
    before_each(function()
        engine = Engine()
        scene = Scene(engine)
    end)
    describe('initialize()', function()
        it('assigns passed engine to engine prop', function()
            scene = Scene(engine)
            assert.is.equal(scene.engine, engine)
        end)
        it('returns returns the instance', function()
            scene = Scene(engine)
            assert.is.equal(scene, scene:initialize(engine))
        end)
        it('allows scene to update', function()
            scene:initialize(engine)
            spy.on(scene, 'onUpdate')
            scene:update(0)
            assert.spy(scene.onUpdate).was.called()
        end)
        it('allows scene to be visible', function()
            scene:initialize(engine)
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was.called()       
        end)
        it('allows scene to accept input', function()
            scene:initialize(engine)
            spy.on(scene, 'onKeyPressed')
            scene:keyPressed('','',false)
            assert.spy(scene.onKeyPressed).was.called()
        end)
    end)

    --callbacks
    describe('onSetup()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onSetup()
            end)
        end)
    end)

    describe('onTearDown()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onTearDown()
            end)
        end)
    end)

    describe('onUpdate()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onUpdate(0.1)
            end)
        end)
    end)

    describe('onDraw()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onDraw()
            end)
        end)
    end)

    describe('onKeyPressed()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onKeyPressed('','',false)
            end)
        end)
    end)

    describe('onKeyReleased()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onKeyReleased('','')
            end)
        end)
    end)

    describe('onMouseMoved()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onMouseMoved(0,0,0,0,false)
            end)
        end)
    end)

    describe('onMousePressed()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onMousePressed(0,0,0,false,1)
            end)
        end)
    end)

    describe('onMouseReleased()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onMouseReleased(0,0,0,false,1)
            end)
        end)
    end)

    describe('onWheelMoved()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onWheelMoved(0,0)
            end)
        end)
    end)

    --event methods
    describe('pause()', function()
        it('prevents scene from updating', function()
            scene:pause()
            spy.on(scene, 'onUpdate')
            scene:update(0)
            assert.spy(scene.onUpdate).was_not.called()
        end)
    end)

    describe('resume()', function()
        it('allows a previously paused scene to update again', function()
            scene:pause()
            scene:resume()
            spy.on(scene, 'onUpdate')
            scene:update(0)
            assert.spy(scene.onUpdate).was.called()
        end)
    end)

    describe('isPaused()', function()
        it('returns true when paused', function()
            scene:pause()
            assert.is.True(scene:isPaused())
        end)
        it('returns false when not paused', function()
            scene:resume()
            assert.is.False(scene:isPaused())
        end)
    end)

    describe('togglePause()', function()
        it('changes a scene from running to paused', function()
            scene:resume()
            scene:togglePause()
            spy.on(scene, 'onUpdate')
            scene:update(0)
            assert.spy(scene.onUpdate).was_not.called()
        end)
        it('changes a scene from paused to running', function()
            scene:pause()
            scene:togglePause()
            spy.on(scene, 'onUpdate')
            scene:update(0)
            assert.spy(scene.onUpdate).was.called()
        end)
    end)

    describe('hide()', function()
        it('prevents a scene from drawing', function()
            scene:hide()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was_not.called()
        end)
    end)

    describe('show()', function()
        it('allows a previously hidden scene to draw again', function()
            scene:hide()
            scene:show()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
    end)

    describe('toggleVisibility()', function()
        it('changes a scene from visible to invisible', function()
            scene:show()
            scene:toggleVisibility()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was_not.called()
        end)
        it('changes a scene from invisible to visible', function()
            scene:hide()
            scene:toggleVisibility()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
    end)

    describe('isVisible()', function()
        it('returns true when visible', function()
            scene:show()
            assert.is.True(scene:isVisible())
        end)
        it('returns false when invisible', function()
            scene:hide()
            assert.is.False(scene:isVisible())
        end)
    end)

    describe('enableInput()', function()
        it('allows inputs to be passed to the scene', function()
            scene:enableInput()
            spy.on(scene, 'onKeyPressed')
            scene:keyPressed('','',false)
            assert.spy(scene.onKeyPressed).was.called()
        end)
    end)

    describe('disableInput()', function()
        it('prevents inputs from being passed to the scene', function()
            scene:disableInput()
            spy.on(scene, 'onKeyPressed')
            scene:keyPressed('','',false)
            assert.spy(scene.onKeyPressed).was_not.called()
        end)
    end)

    describe('toggleInput()', function()
        it('changes a scene from inputs enabled to disabled', function()
            scene:enableInput()
            scene:toggleInput()
            spy.on(scene, 'onKeyPressed')
            scene:keyPressed('','',false)
            assert.spy(scene.onKeyPressed).was_not.called()
        end)
        it('changes a scene from inputs disabled to enabled', function()
            scene:disableInput()
            scene:toggleInput()
            spy.on(scene, 'onKeyPressed')
            scene:keyPressed('','',false)
            assert.spy(scene.onKeyPressed).was.called()
        end)
    end)

    describe('isInputEnabled()', function()
        it('returns true when inputs are enabled', function()
            scene:enableInput()
            assert.is.True(scene:isInputEnabled())
        end)
        it('returns false when inputs are disabled', function()
            scene:disableInput()
            assert.is.False(scene:isInputEnabled())
        end)
    end)

    describe('setup()', function()
        it('calls onSetup() if not previously setup', function()
            spy.on(scene, 'onSetup')
            scene:setup()
            assert.spy(scene.onSetup).was.called()
        end)
        it('does not call onSetup() if previously setup', function()
            scene:setup()
            spy.on(scene, 'onSetup')
            scene:setup()
            assert.spy(scene.onSetup).was_not.called()
        end)
        it('calls onSetup() if previously torn down', function()
            scene:setup()
            scene:tearDown()
            spy.on(scene, 'onSetup')
            scene:setup()
            assert.spy(scene.onSetup).was.called()
        end)
    end)

    describe('tearDown()', function()
        it('calls onTearDown() when setup and not already torn down', function()
            scene:setup()
            spy.on(scene, 'onTearDown')
            scene:tearDown()
            assert.spy(scene.onTearDown).was.called()
        end)
        it('does not call onTearDown() if not setup', function()
            spy.on(scene, 'onTearDown')
            scene:tearDown()
            assert.spy(scene.onTearDown).was_not.called()
        end)
        it('does not call onTearDown() if already torn down', function()
            scene:tearDown()
            spy.on(scene, 'onTearDown')
            scene:tearDown()
            assert.spy(scene.onTearDown).was_not.called()
        end)
    end)

    describe('isSetup()', function()
        it('returns true when setup', function()
            scene:setup()
            assert.is.True(scene:isSetup())
        end)
        it('returns false when not setup', function()
            assert.is.False(scene:isSetup())
        end)
    end)

    describe('update()', function()
        it('calls onSetup() if not already setup', function()
            spy.on(scene, 'onSetup')
            scene:update(0)
            assert.spy(scene.onSetup).was.called()
        end)
        it('does not call onSetup() if already setup', function()
            scene:setup()
            spy.on(scene, 'onSetup')
            scene:update(0)
            assert.spy(scene.onSetup).was_not.called()
        end)
    end)

    describe('draw()', function()
        it('when invisible does not call onDraw()', function()
            scene:hide()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was_not.called()
        end)
        it('when visible calls onDraw()', function()
            scene:show()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
        it('calls onSetup() if not already setup', function()
            spy.on(scene, 'onSetup')
            scene:draw()
            assert.spy(scene.onSetup).was.called()
        end)
        it('does not call onSetup() if already setup', function()
            scene:setup()
            spy.on(scene, 'onSetup')
            scene:draw()
            assert.spy(scene.onSetup).was_not.called()
        end)
    end)

    describe('keyPressed()', function()
        it('when inputs are enabled calls onKeyPressed()', function()
            scene:enableInput()
            spy.on(scene, 'onKeyPressed')
            scene:keyPressed('','',false)
            assert.spy(scene.onKeyPressed).was.called()
        end)
        it('when inputs are disabled does not call onKeyPressed()', function()
            scene:disableInput()
            spy.on(scene, 'onKeyPressed')
            scene:keyPressed('','',false)
            assert.spy(scene.onKeyPressed).was_not.called()
        end)
    end)

    describe('keyReleased()', function()
        it('when inputs are enabled calls onKeyReleased()', function()
            scene:enableInput()
            spy.on(scene, 'onKeyReleased')
            scene:keyReleased('','')
            assert.spy(scene.onKeyReleased).was.called()
        end)
        it('when inputs are disabled does not call onKeyReleased()', function()
            scene:disableInput()
            spy.on(scene, 'onKeyReleased')
            scene:keyReleased('','')
            assert.spy(scene.onKeyReleased).was_not.called()
        end)
    end)

    describe('mouseMoved()', function()
        it('when inputs are enabled calls onMouseMoved()', function()
            scene:enableInput()
            spy.on(scene, 'onMouseMoved')
            scene:mouseMoved(0,0,0,0,false)
            assert.spy(scene.onMouseMoved).was.called()
        end)
        it('when inputs are disabled does not call onMouseMoved()', function()
            scene:disableInput()
            spy.on(scene, 'onMouseMoved')
            scene:mouseMoved(0,0,0,0,false)
            assert.spy(scene.onMouseMoved).was_not.called()
        end)
    end)

    describe('mousePressed()', function()
        it('when inputs are enabled calls onMousePressed()', function()
            scene:enableInput()
            spy.on(scene, 'onMousePressed')
            scene:mousePressed(0,0,0,false,1)
            assert.spy(scene.onMousePressed).was.called()
        end)
        it('when inputs are disabled does not call onMousePressed()', function()
            scene:disableInput()
            spy.on(scene, 'onMousePressed')
            scene:mousePressed(0,0,0,false,1)
            assert.spy(scene.onMousePressed).was_not.called()
        end)
    end)

    describe('mouseRelased()', function()
        it('when inputs are enabled calls onMouseReleased()', function()
            scene:enableInput()
            spy.on(scene, 'onMouseReleased')
            scene:mouseReleased(0,0,0,false,1)
            assert.spy(scene.onMouseReleased).was.called()
        end)
        it('when inputs are disabled does not call onMouseReleased()', function()
            scene:disableInput()
            spy.on(scene, 'onMouseReleased')
            scene:mouseReleased(0,0,0,false,1)
            assert.spy(scene.onMouseReleased).was_not.called()
        end)
    end)

    describe('wheelMoved()', function()
        it('when inputs are enabled calls onWheelMoved()', function()
            scene:enableInput()
            spy.on(scene, 'onWheelMoved')
            scene:wheelMoved(0,0,0,false,1)
            assert.spy(scene.onWheelMoved).was.called()
        end)
        it('when inputs are disabled does not call onWheelMoved()', function()
            scene:disableInput()
            spy.on(scene, 'onWheelMoved')
            scene:wheelMoved(0,0,0,false,1)
            assert.spy(scene.onWheelMoved).was_not.called()
        end)
    end)

    --Event handling
    describe('emit()', function()
        it('calls onEvent()', function()
            spy.on(scene, 'onEvent')
            scene:emit('test')
            assert.spy(scene.onEvent).was.called(1)
            scene.onEvent:revert()
        end)
        it('passes event to onEvent()', function()
            spy.on(scene, 'onEvent')
            scene:emit('test')
            assert.spy(scene.onEvent).was.called_with(match.is_ref(scene), 'test')
            scene.onEvent:revert()
        end)
        it('passes args to onEvent()', function()
            spy.on(scene, 'onEvent')
            scene:emit('test', 1, 2)
            assert.spy(scene.onEvent).was.called_with(match.is_ref(scene), 'test', 1, 2)
            scene.onEvent:revert()
        end)
        it('calls all registered handlers', function()
            local s1 = spy.new(function() end)
            local s2 = spy.new(function() end)
            scene:registerEventHandler('test', s1)
            scene:registerEventHandler('test', s2)
            scene:emit('test')
            assert.spy(s1).was.called(1)
            assert.spy(s2).was.called(1)
        end)
        it('calls all registered handlers in order', function()
            local result = ''
            local f1 = function() result = result..'1' end
            local f2 = function() result = result..'2' end
            scene:registerEventHandler('test', f1)
            scene:registerEventHandler('test', f2)
            scene:emit('test')
            assert.is.equal(result, '12')
        end)
        it('does not call handlers with non-matching event ID', function()
            local s1 = spy.new(function() end)
            local s2 = spy.new(function() end)
            scene:registerEventHandler('test1', s1)
            scene:registerEventHandler('test2', s2)
            scene:emit('test1')
            assert.spy(s2).was_not.called()
        end)
        it('passes args to event handlers', function()
            local s = spy.new(function(...) end)
            scene:registerEventHandler('test', s)
            scene:emit('test', 'foo', 'bar')
            assert.spy(s).was.called_with('foo', 'bar')
        end)
    end)

    describe('registerEventHandler()', function()
        it('when not passed an idx returns the next idx', function()
            local idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', function() end)
            assert.is.equal(idx, 3)
        end)
        it('when passed an idx returns the passed idx', function()
            local idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', 2, function() end)
            assert.is.equal(idx, 2)
        end)
        it('when passed an idx inserts that handler at that idx', function()
            local result = ''
            local s1 = spy.new(function() result = result..'1' end)
            local s2 = spy.new(function() result = result..'2' end)
            scene:registerEventHandler('test', s1)
            scene:registerEventHandler('test', 1, s2)
            scene:emit('test')
            assert.is.equal(result, '21')
        end)
    end)

    describe('removeEventHandler()', function()
        it('removes previously registered handlers', function()
            local s1 = spy.new(function() end)
            local idx = scene:registerEventHandler('test', s1)
            scene:removeEventHandler('test', idx)
            scene:emit('test')
            assert.spy(s1).was_not.called()
        end)
        it('when passed an idx removes the handler at that idx', function()
            local s1 = spy.new(function() end)
            local s2 = spy.new(function() end)
            scene:registerEventHandler('test', s1)
            scene:registerEventHandler('test', s2)
            scene:removeEventHandler('test', 1)
            scene:emit('test')
            assert.spy(s1).was_not.called()
        end)
    end)

    describe('onEvent()', function()
        it('does not error', function()
            assert.has_no.errors(function() scene:onEvent('test') end)
        end)
    end)

    --entities and components
    describe('addEnt()', function()
        it('when passed nothing returns an integer ID', function()
            assert.is.Type(scene:addEnt(), 'number')
        end)
        it('when passed an ID returns that same ID', function()
            assert.is.equal(4, scene:addEnt(nil, 4))
        end)
        it('returns different IDs each call', function()
            local id1, id2 = scene:addEnt(), scene:addEnt()
            assert.is_not.equal(id1, id2)
        end)
        it('accepts string IDs', function()
            assert.is.equal('test', scene:addEnt(nil, 'test'))
        end)
    end)

    describe('removeEnt()', function()
        it('does not error if entity does not exist', function()
            assert.has_no.errors(function()
                scene:removeEnt(1)
            end)      
        end)
    end)

    describe('removeEntDelayed()', function()
        it('does not remove the entity immediately', function()
            local TestCom = RudeObject:subclass('TestCom')
            scene:addCom('test', TestCom)
            scene:removeEntDelayed('test')
            assert.is.True(scene:hasCom('test', TestCom))
        end)
        it('removes the entity after the next update', function()
            local TestCom = RudeObject:subclass('TestCom')
            scene:addCom('test', TestCom)
            scene:removeEntDelayed('test')
            scene:update(0)
            assert.is.False(scene:hasCom('test', TestCom))           
        end)
        it('does not error if entity does not exist', function()
            assert.has_no.errors(function()
                scene:removeEntDelayed(1)
            end)
        end)
    end)

    describe('getEnt()', function()

    end)

    describe('entExists()', function()
    
    end)

    describe('addCom()', function()

    end)

    describe('removeCom()', function()

    end)

    describe('getCom()', function()

    end)

    describe('entIter()', function()

    end)

    describe('hasComIter()', function()
        it('returns an iterator that returns an entity ID with the passed com class', function()
            local TestCom = RudeObject:subclass('TestCom')
            scene:addCom(1, TestCom)
            assert.is.equal(scene:hasComIter(TestCom)(), 1)
        end)
    end)

    describe('clearHasComIterCache()', function()
    
    end)

    describe('clearAllHasComIterCache()', function()
    
    end)

    describe('getEntWithCom()', function()
    
    end)

    describe('hasCom()', function()

    end)

    describe('exportEntities()', function()
    
    end)

    describe('importEntities()', function()
    
    end)

    describe('usePlugin()', function()
    
    end)

    describe('registerComponentClass()', function()
    
    end)

    describe('componentClassExists()', function()
    
    end)

    describe('getComponentClass()', function()
    
    end)

end)