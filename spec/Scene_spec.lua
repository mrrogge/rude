local Engine = require('rude.Engine')
local Scene = require('rude.Scene')
local RudeObject = require('rude.RudeObject')

describe('a Scene instance', function()
    local engine, scene
    before_each(function()
        engine = Engine()
        scene = Scene(engine)
    end)
    describe('initialize()', function()
        it('assigns passed engine to engine prop', function()
            scene = Scene(engine)
            assert.is.equal(scene.engine, engine)
        end)
        it('returns returns the instance', function()
            scene = Scene(engine)
            assert.is.equal(scene, scene:initialize(engine))
        end)
    end)

    describe('whileStarting()', function()
        it('calls finishStarting()', function()
            spy.on(scene, 'finishStarting')
            scene:whileStarting(0.1)
            assert.spy(scene.finishStarting).was.called()
        end)
    end)

    describe('finishStarting()', function()
        it('prevents whileStarting() from being called on future updates', function()
            spy.on(scene, 'whileStarting')
            scene:finishStarting()
            scene:update(0.1)
            assert.spy(scene.whileStarting).was_not.called()
        end)
    end)

    describe('pause()', function()
        it('while scene is running, enables whilePausing() to be called during update()', function()
            scene:resume()
            scene:update(0.1)
            spy.on(scene, 'whilePausing')
            scene:pause()
            scene:update(0.1)
            assert.spy(scene.whilePausing).was.called()
        end)
        it('when whilePausing() does NOT call finishPausing() right away, this does not stop onUpdate() from being called', function()
            scene:resume()
            scene:update(0.1)
            scene.whilePausing = function(dt) end
            spy.on(scene, 'onUpdate')
            scene:pause()
            scene:update(0.1)
            assert.spy(scene.onUpdate).was.called()
        end)
    end)

    describe('whilePausing()', function()
        it('calls finishPausing()', function()
            spy.on(scene, 'finishPausing')
            scene:whilePausing(0.1)
            assert.spy(scene.finishPausing).was.called()
        end)
    end)

    describe('finishPausing()', function()
        it('pauses the scene, preventing onUpdate() from being called', function()
            scene:resume()
            scene:update(0.1)
            scene:pause()
            spy.on(scene, 'onUpdate')
            scene:finishPausing()
            scene:update(0.1)
            assert.spy(scene.onUpdate).was_not.called()
        end)
        it('prevents whilePausing() from being called', function()
            scene:resume()
            scene:update(0.1)
            scene:pause()
            spy.on(scene, 'whilePausing')
            scene:finishPausing()
            scene:update(0.1)
            assert.spy(scene.whilePausing).was_not.called()
        end)
    end)

    describe('resume()', function()
        it('while scene is paused, allows whileResuming() to be called during update', function()
            spy.on(scene, 'whileResuming')
            scene:resume()
            scene:update(0.1)
            assert.spy(scene.whileResuming).was.called()
        end)
        it('when whileResuming() does NOT call finishResuming() right away, this does not allow onUpdate() to be called while updating', function()
            scene.whileResuming = function(dt) end
            spy.on(scene, 'onUpdate')
            scene:resume()
            scene:update(0.1)
            assert.spy(scene.onUpdate).was_not.called()
        end)
    end)

    describe('whileResuming()', function()
        it('calls finishResuming()', function()
            spy.on(scene, 'finishResuming')
            scene:whileResuming(0.1)
            assert.spy(scene.finishResuming).was.called()
        end)
    end)

    describe('finishResuming()', function()
        it('resumes the scene, allowing onUpdate() to be called again', function()
            scene:resume()
            spy.on(scene, 'onUpdate')
            scene:finishResuming()
            scene:update(0.1)
            assert.spy(scene.onUpdate).was.called()
        end)
        it('prevents whileResuming() from being called', function()
            scene:resume()
            spy.on(scene, 'whileResuming')
            scene:finishResuming()
            scene:update(0.1)
            assert.spy(scene.whileResuming).was_not.called()
        end)
    end)

    describe('hide()', function()
        it('allows whileHiding() to be called when updating', function()
            scene:show()
            scene:finishShowing()
            spy.on(scene, 'whileHiding')
            scene:hide()
            scene:update(0.1)
            assert.spy(scene.whileHiding).was.called()
        end)
        it('does not stop onDraw() from being called', function()
            scene:show()
            scene:finishShowing()
            spy.on(scene, 'onDraw')
            scene:hide()
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
    end)

    describe('whileHiding()', function()
        it('calls finishHiding()', function()
            spy.on(scene, 'finishHiding')
            scene:whileHiding(0.1)
            assert.spy(scene.finishHiding).was.called()
        end)
    end)

    describe('finishHiding()', function()
        it('prevents onDraw() from being called during draws', function()
            scene:show()
            scene:finishShowing()
            scene:hide()
            spy.on(scene, 'onDraw')
            scene:finishHiding()
            scene:draw()
            assert.spy(scene.onDraw).was_not.called()
        end)
        it('prevents whileHiding() from being called during update', function()
            scene:show()
            scene:finishShowing()
            scene:hide()
            spy.on(scene, 'whileHiding')
            scene:finishHiding()
            scene:update(0.1)
            assert.spy(scene.whileHiding).was_not.called()
        end)
    end)

    describe('show()', function()
        it('allows whileShowing() to be called when updating', function()
            spy.on(scene, 'whileShowing')
            scene:show()
            scene:update(0.1)
            assert.spy(scene.whileShowing).was.called()
        end)
        it('allows onDraw() to be called when drawing', function()
            spy.on(scene, 'onDraw')
            scene:show()
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
    end)

    describe('whileShowing()', function()
        it('calls finishShowing()', function()
            spy.on(scene, 'finishShowing')
            scene:whileShowing(0.1)
            assert.spy(scene.finishShowing).was.called()
        end)
    end)

    describe('finishShowing()', function()
        it('allows onDraw() to be called when drawing', function()
            scene:show()
            spy.on(scene, 'onDraw')
            scene:finishShowing()
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
        it('prevents whileShowing() from being called when updating', function()
            scene:show()
            spy.on(scene, 'whileShowing')
            scene:finishShowing()
            scene:update(0.1)
            assert.spy(scene.whileShowing).was_not.called()
        end)
    end)

    describe('onUpdate()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onUpdate(0.1)
            end)
        end)
    end)

    describe('update()', function()
        it('when starting calls whileStarting()', function()
            spy.on(scene, 'whileStarting')
            scene:update(0.1)
            assert.spy(scene.whileStarting).was.called()
        end)
        it('when started does not call whileStarting()', function()
            scene:finishStarting()
            spy.on(scene, 'whileStarting')
            scene:update(0.1)
            assert.spy(scene.whileStarting).was_not.called()
        end)
        it('when paused does not call onUpdate()', function()
            spy.on(scene, 'onUpdate')
            scene:update(0.1)
            assert.spy(scene.onUpdate).was_not.called()
        end)
        it('when running calls onUpdate()', function()
            scene:resume()
            scene:finishResuming()
            spy.on(scene, 'onUpdate')
            scene:update(0.1)
            assert.spy(scene.onUpdate).was.called()
        end)
        it('when pausing calls onUpdate()', function()
            scene:resume()
            scene:finishResuming()
            scene:pause()
            scene.whilePausing = function(dt) end
            spy.on(scene, 'onUpdate')
            scene:update(0.1)
            assert.spy(scene.onUpdate).was.called()
        end)
        it('when pausing calls whilePausing()', function()
            scene:resume()
            scene:finishResuming()
            scene:pause()
            spy.on(scene, 'whilePausing')
            scene:update(0.1)
            assert.spy(scene.whilePausing).was.called()
        end)
        it('when resuming calls whileResuming()', function()
            scene:resume()
            spy.on(scene, 'whileResuming')
            scene:update(0.1)
            assert.spy(scene.whileResuming).was.called()
        end)
        it('when resuming does not call onUpdate()', function()
            scene:resume()
            scene.whileResuming = function(dt) end
            spy.on(scene, 'onUpdate')
            scene:update(0.1)
            assert.spy(scene.onUpdate).was_not.called()
        end)
        it('when showing calls whileShowing()', function()
            scene:show()
            spy.on(scene, 'whileShowing')
            scene:update(0.1)
            assert.spy(scene.whileShowing).was.called()        
        end)
        it('when hiding calls whileHiding()', function()
            scene:show()
            scene:finishShowing()
            scene:hide()
            spy.on(scene, 'whileHiding')
            scene:update(0.1)
            assert.spy(scene.whileHiding).was.called()
        end)
    end)

    describe('onDraw()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onDraw()
            end)
        end)
    end)

    describe('draw()', function()
        it('when invisible does not call onDraw()', function()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was_not.called()
        end)
        it('when showing calls onDraw()', function()
            scene:show()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
        it('when visible calls onDraw()', function()
            scene:show()
            scene:finishShowing()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
        it('when hiding calls onDraw()', function()
            scene:show()
            scene:finishShowing()
            scene:hide()
            spy.on(scene, 'onDraw')
            scene:draw()
            assert.spy(scene.onDraw).was.called()
        end)
    end)

    describe('onKeypressed()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onKeypressed('','',false)
            end)
        end)
    end)

    describe('keypressed()', function()
        it('calls onKeypressed()', function()
            spy.on(scene, 'onKeypressed')
            scene:keypressed('','',false)
            assert.spy(scene.onKeypressed).was.called()
        end)
    end)

    describe('onKeyreleased()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onKeyreleased('','')
            end)
        end)
    end)

    describe('keyreleased()', function()
        it('calls onKeyreleased()', function()
            spy.on(scene, 'onKeyreleased')
            scene:keyreleased('','')
            assert.spy(scene.onKeyreleased).was.called()
        end)
    end)

    describe('onMousemoved()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onMousemoved(0,0,0,0,false)
            end)
        end)
    end)

    describe('mousemoved()', function()
        it('calls onMousemoved()', function()
            spy.on(scene, 'onMousemoved')
            scene:mousemoved(0,0,0,0,false)
            assert.spy(scene.onMousemoved).was.called()
        end)
    end)

    describe('onMousepressed()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onMousepressed(0,0,0,false,1)
            end)
        end)
    end)

    describe('mousepressed()', function()
        it('calls onMousepressed()', function()
            spy.on(scene, 'onMousepressed')
            scene:mousepressed(0,0,0,false,1)
            assert.spy(scene.onMousepressed).was.called()
        end)
    end)

    describe('onMousereleased()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onMousereleased(0,0,0,false,1)
            end)
        end)
    end)

    describe('mouserelased()', function()
        it('calls onMousereleased()', function()
            spy.on(scene, 'onMousereleased')
            scene:mousereleased(0,0,0,false,1)
            assert.spy(scene.onMousereleased).was.called()
        end)
    end)

    describe('onWheelmoved()', function()
        it('does not error', function()
            assert.has_no.errors(function()
                scene:onWheelmoved(0,0)
            end)
        end)
    end)

    describe('wheelmoved()', function()
        it('calls onWheelmoved()', function()
            spy.on(scene, 'onWheelmoved')
            scene:wheelmoved(0,0,0,false,1)
            assert.spy(scene.onWheelmoved).was.called()
        end)
    end)

    describe('addEnt()', function()
        it('when passed nothing returns an integer ID', function()
            assert.is.Type(scene:addEnt(), 'number')
        end)
        it('when passed an ID returns that same ID', function()
            assert.is.equal(4, scene:addEnt(nil, 4))
        end)
        it('returns different IDs each call', function()
            local id1, id2 = scene:addEnt(), scene:addEnt()
            assert.is_not.equal(id1, id2)
        end)
        it('accepts string IDs', function()
            assert.is.equal('test', scene:addEnt(nil, 'test'))
        end)
    end)

    describe('removeEnt()', function()
        it('does not error if entity does not exist', function()
            assert.has_no.errors(function()
                scene:removeEnt(1)
            end)      
        end)
    end)

    describe('removeEntDelayed()', function()
        it('does not remove the entity immediately', function()
            local TestCom = RudeObject:subclass('TestCom')
            scene:addCom('test', TestCom)
            scene:removeEntDelayed('test')
            assert.is.True(scene:hasCom('test', TestCom))
        end)
        it('removes the entity after the next update', function()
            local TestCom = RudeObject:subclass('TestCom')
            scene:addCom('test', TestCom)
            scene:removeEntDelayed('test')
            scene:upate(0)
            assert.is.False(scene:hasCom('test', TestCom))           
        end)
        it('does not error if entity does not exist', function()
            assert.has_no.errors(function()
                scene:removeEntDelayed(1)
            end)
        end)
    end)

    describe('getEnt()', function()

    end)

    describe('entExists()', function()
    
    end)

    describe('addCom()', function()

    end)

    describe('removeCom()', function()

    end)

    describe('getCom()', function()

    end)

    describe('entIter()', function()

    end)

    describe('hasComIter()', function()
        it('returns an iterator that returns an entity ID with the passed com class', function()
            local TestCom = RudeObject:subclass('TestCom')
            scene:addCom(1, TestCom)
            assert.is.equal(scene:hasComIter(TestCom)(), 1)
        end)
    end)

    describe('clearHasComIterCache()', function()
    
    end)

    describe('clearAllHasComIterCache()', function()
    
    end)

    describe('getEntWithCom()', function()
    
    end)

    describe('hasCom()', function()

    end)

    describe('exportEntities()', function()
    
    end)

    describe('importEntities()', function()
    
    end)

    describe('usePlugin()', function()
    
    end)

    describe('registerComponentClass()', function()
    
    end)

    describe('componentClassExists()', function()
    
    end)

    describe('getComponentClass()', function()
    
    end)

    --Event handling
    describe('emit()', function()
        it('calls onEvent()', function()
            spy.on(scene, 'onEvent')
            scene:emit('test')
            assert.spy(scene.onEvent).was.called(1)
            scene.onEvent:revert()
        end)
        it('passes event to onEvent()', function()
            spy.on(scene, 'onEvent')
            scene:emit('test')
            assert.spy(scene.onEvent).was.called_with(match.is_ref(scene), 'test')
            scene.onEvent:revert()
        end)
        it('passes args to onEvent()', function()
            spy.on(scene, 'onEvent')
            scene:emit('test', 1, 2)
            assert.spy(scene.onEvent).was.called_with(match.is_ref(scene), 'test', 1, 2)
            scene.onEvent:revert()
        end)
        it('calls all registered handlers', function()
            local s1 = spy.new(function() end)
            local s2 = spy.new(function() end)
            scene:registerEventHandler('test', s1)
            scene:registerEventHandler('test', s2)
            scene:emit('test')
            assert.spy(s1).was.called(1)
            assert.spy(s2).was.called(1)
        end)
        it('calls all registered handlers in order', function()
            local result = ''
            local f1 = function() result = result..'1' end
            local f2 = function() result = result..'2' end
            scene:registerEventHandler('test', f1)
            scene:registerEventHandler('test', f2)
            scene:emit('test')
            assert.is.equal(result, '12')
        end)
        it('does not call handlers with non-matching event ID', function()
            local s1 = spy.new(function() end)
            local s2 = spy.new(function() end)
            scene:registerEventHandler('test1', s1)
            scene:registerEventHandler('test2', s2)
            scene:emit('test1')
            assert.spy(s2).was_not.called()
        end)
        it('passes args to event handlers', function()
            local s = spy.new(function(...) end)
            scene:registerEventHandler('test', s)
            scene:emit('test', 'foo', 'bar')
            assert.spy(s).was.called_with('foo', 'bar')
        end)
    end)

    describe('registerEventHandler()', function()
        it('when not passed an idx returns the next idx', function()
            local idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', function() end)
            assert.is.equal(idx, 3)
        end)
        it('when passed an idx returns the passed idx', function()
            local idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', function() end)
            idx = scene:registerEventHandler('test', 2, function() end)
            assert.is.equal(idx, 2)
        end)
        it('when passed an idx inserts that handler at that idx', function()
            local result = ''
            local s1 = spy.new(function() result = result..'1' end)
            local s2 = spy.new(function() result = result..'2' end)
            scene:registerEventHandler('test', s1)
            scene:registerEventHandler('test', 1, s2)
            scene:emit('test')
            assert.is.equal(result, '21')
        end)
    end)

    describe('removeEventHandler()', function()
        it('removes previously registered handlers', function()
            local s1 = spy.new(function() end)
            local idx = scene:registerEventHandler('test', s1)
            scene:removeEventHandler('test', idx)
            scene:emit('test')
            assert.spy(s1).was_not.called()
        end)
        it('when passed an idx removes the handler at that idx', function()
            local s1 = spy.new(function() end)
            local s2 = spy.new(function() end)
            scene:registerEventHandler('test', s1)
            scene:registerEventHandler('test', s2)
            scene:removeEventHandler('test', 1)
            scene:emit('test')
            assert.spy(s1).was_not.called()
        end)
    end)

    describe('onEvent()', function()
        it('does not error', function()
            assert.has_no.errors(function() scene:onEvent('test') end)
        end)
    end)
end)